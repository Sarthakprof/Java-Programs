 Java Intro- https://www.oracle.com/technetwork/java/intro-141325.html
 Features of Java:
    - Object Oriented
    - robust
    - secure
    - platform independent
    - high performing
    - interpreted
    - threaded
    - dynamic
 
Java platform:
    > Two Components:
        - Java Virtual Machine JVM
        - Java API

        -- both together known as JRE
    
    > Java Source Code is compiled as well as interpreted
        - Java compiler compiles source code to bytecode(intermediate code)
          that is interpreted by JVM into machine code and that is run on actual platform.
    *FLOW: Java Application Code --> Java Compiler --> ByteCode --> JVM --> Machine Code --> Run in Hardware OS 

Version and Editions:
    - Java EE
        - Java SE
            -Java ME

Object Oriented Programming

 - Class : Blueprint
 - Objects : Real world entities

 Features:
  - Abstraction
  - Inheritance
  - Poly-Morphism
  

  Primitive Data Types
    - byte 
    - short
    - int 
    - long
    - float
    - double
    - char
    - boolean

Objects v/s Primitive
 - Objects have state and behavior
 - Primitives have only single value

Instantiating an Object
    String s = new String();
    Circle c = new Circle();

    Circle = Reference Types
    c = reference variable
    new = keyword
    Circle() = Object type

Memory Management - Stack and Heap
    - In the memory managed by JVM behind the scenes,
         object references and objects assigned to them are managed by Stacks and Heaps

Objects contain data, data is stored in instance variables

Instantiating of an Object:
    - Using new keyword
    - When you Instance an Object with new Keyword you are actually re-creating a special method called Constructor
    
    Class X Instantiates Point
    Point point = new Point(2, 5);

    Class Point 
    public Class Point{
        //Constructor
         public Point(int p1, int p2){
             x = p1;
             y = p2;
         }
     }

Constructor gives you flexibility to pass any no. of parameters in int

Customer c = new Customer(a, b, c)
Customer c = new Customer();
Customer c = new Customer(a, b);

-> Creating Object Types
    - An object type is called as Class
    - A class is a template for object creation
    - An object is really an instance of class
    - Many object instances can be generated from the class

    Note: Each file may only contain only one public top level class
        * Other top level classes may be included in one file but they may not list an access modifier.(Encapsulation ref*)
        //Good Exam Topic
        public class HelloWorld{

        }
        class AHelperClass{

        }

        (Refer Car Class Example)

        - Instance Variables are created before methods in Class.
        
        
	"Void"
	A method that declares a return type of void cannot return any value.  So, for example, the following is illegal and would not compile:
	public void doSomething() {
	    return "Hello!";
	}
	
	It is, however, legal (though uncommon) to just use the return statement.
	public void doSomething() {
	    return;
	}
	
	
As mentioned, it's pretty uncommon (and useless) 
to see a return like that on it's own... though it can be used to end a method inside of a control structure.

-> Building Constructors

	    - Constructors are special methods
	    - Constructor methods have the same name as the class itself
	    - Constructor look just like other methods but they have no return types not even void
	    - Constructors are invoked only by using the new keyword not the dot notation like methods
	    - You should use Constructors to initialize data
	
	public class Car{
	    String color;
	    String type;
	
	    Car(String c, String t){
	        color = c;
	        type = t;
	    }
	}
	
	Car car = new Car ("blue", "Lambhorghini")

Q:  What's the difference between a "default" and a "no-arg" constructor?

	A:  A "no-arg" constructor is one that lists no parameters (it takes no arguments).  A "default" 
	    constructor is a "no-arg" constructor that is created by the compiler, 
	    in the event that you don't explicitly create one yourself.

-> Initialization Blocks
{
    //innitialization bock
}

//Example
//Initialization Block Example
	public Class Ib{
	
	    String a = "A for apple";
	
	    {
	        a = "A for Airplane";
	    }
	
	    Ib (){
	        a = "A for Air"; 
	        a
	    }
	}
	
	//a is assigned "A for Apple" first then "A for Airplane" and then "A for Air"
	
	public Class Ib{
	
	    {
	        a = "A for Airplane";
	    }
	
	    String a = "A for apple";
	    String b = "B for ball";    
	
	    Ib (){
	        a = "A for Air"; 
	        
	    }
	}
	
	//a is assigned "A for Apple" first then "A for Airplane" and then "A for Air"
	
	public Class Ib{
	
	    Ib (){
	        a = "A for Air";
	    }  
	    
	    String a = "A for apple";
	    String b = "B for ball";
	    
	    {
	        a = "A for Airplane";
	    }
	}
	
	//a is assigned "A for Apple" first then "A for Airplane" and then "A for Air"
	
	
	
	*************** SECTION 4: Static, Scope and Garbage Collection ***************
	
	***********Static Variables ************	
	- Data associated with the class instead of the object is stored in class variables(versus instance varables for objects or instances)
	- Class variables are also called static variables
	- They are called Static variables because the static keyword is used to identify them
	
	- TO access the static variable you use the name of the class and the class variable name
			public class Car{
				static int carCount;
				Car.carCount = 1;
				}
				
	- Oddly, you can use either the class name (Car) or the object reference of that type to access class variables
	
			Car myCar = new Car('Black', 'Ranger');
			myCar.carCount = 1;
			

	******************Static Methods*******************
	
	- A static method just like the static variables is associate wth the class and not the objects(instances)
	- Static methods are called class methods
	- To call a non-static method that is instance you can call via class object.
	- But to call class methods that is static method
	
	static void resetCarCount(){
		carCount = 0;
		//resets car count to 0
		
	}
	
	Now to call class/static method you can just use class name
	
	Car c = new Car();
	c.resetCarCount(); //Legal but confusing
	Car.resetCount(); //Proper way to call class/static methods
	
	
	- Static methods do have access to any instance or object data
	carCount++;
		 serialNumber = carCount;
		 
		 color = "blue" //wrong as color is the instance variable
		 
		 
  Q: What is the point of using static methods???
  A: They generally have two purpose:
  		1. They are used to access(update & fetch) class variables data
  			- Although this can be done by any instance of the class. It is considered more appropiate to use the class or static methods for this purpose
  			- 
  		2. Static methods provide funtionality without the need for an object /instance 
  		 	- FOr ex: maths formulas are great reasons to have static methods
  		 	
  		 	
-> Static Reference variables and null!!!
  
  -If the reference variable you are working with has a null value
   (meaning it is not referring to an object), it's in a dangerous state. 
  - Specifically, if you access an instance member with it, you will see the dreaded "NullPointerException."
	This is an exception created by the JVM and unless special exception handling code is written, will result in your program quitting prematurely
  
			  //null pointer exception
			  public static void main(String[] args) {
			    String s = null;
			    s = s.toUpperCase(); // Oops! s is null! 
				}
			  
			  public static void main(String[] args) {
			    Math m = null;
			    double result = m.floor(28.15); // Confusing code, but it works.
				}
			
			//CORRECT WAY
			public static void main(String[] args) {
				    double result = Math.floor(28.15);
				}
				
				
->Static Initialization Block

	static{
	  //code
	}
	
	static initialization block will executed once only when object is initialized
	while regular initialization block is executed everytime a object is initialized
	
	static initiaaliztion block cannot access instance variables like static methods 
	but it can access class/static variables
	
	
	
-> Example
		public class Person {
		    {
		        personCount = 10;
		    }
		    static {
		        personCount = 20;
		    }
		    private static int personCount = 1000;
		    {
		        personCount = 30;
		    }
		    static {
		        personCount = 40;
		    }
		    public static void main(String[] args) {
		       System.out.println(Person.personCount); // Line A 
		       Person p = new Person(); // Line B
		       System.out.println(Person.personCount); // Line C
		       Person.personCount = 100; // Line D 
		       p = new Person(); // Line E
		       System.out.println(Person.personCount); // Line F
		    }
		}
		When the program starts and this main method is kicked off, the Person class is loaded.  This, in turn, makes the static personCount variable available, with a default value of 0 (remember, all instance and static variables start with default values).
		Next all of the static initialization blocks, and the static variable's explicit initialization are executed in the order they are listed, from top to bottom.  Therefore, the personCount variable is set to 20, 1000, and finally 40.  So Line A prints "40."
		On Line B, an object is instantiated, so that causes the instance initialization blocks to be executed in the order they are listed, from top to bottom.  So now personCount is changed to 10 and finally 30.  Line C prints the value "30."
		Line D changes the personCount to 100, but Line E causes the instance initialilzation blocks to be executed again.  Therefore, the final value printed in Line F is, once again, "30."  So the answer to the quiz is: 
		//OUTPUT:
		40
		
		30
		
		30
		
		
************This variable ********************

The various usages of 'THIS' keyword in Java are as follows:

	It can be used to refer instance variable of current class
	It can be used to invoke or initiate current class constructor
	It can be passed as an argument in the method call
	It can be passed as argument in the constructor call
	It can be used to return the current class instance
	
	--check examples in code

*************SCOPE***************************

Variables and methods have certain range in which they exist and where they can accessed
	- and this concept here is called scope
	- there are different levels of scope
	- scope pertains to where data exists
	- scope can easily be identified with the curly brackets or code blocks
	
You have seen a number of different locations for variables so far:
	- inside of a class - //Instance Variables
	- inside of a class but declared as static - //Static variables
	- inside of a method (as parameters) -//SLocal Variables
	
Local variables are not always method variables:
	- Local variables can be inside for() loops, if() stmts, etc.
	- Sometimes variables are described a "most-local" or "local-most" , meaning that it is nearest variables of a given name regardless of scope.
	
	
	




			
  
	
				
				