 Java Intro- https://www.oracle.com/technetwork/java/intro-141325.html
 Features of Java:
    - Object Oriented
    - robust
    - secure
    - platform independent
    - high performing
    - interpreted
    - threaded
    - dynamic

Java platform:
    > Two Components:
        - Java Virtual Machine JVM
        - Java API

        -- both together known as JRE
    
    > Java Source Code is compiled as well as interpreted
        - Java compiler compiles source code to bytecode(intermediate code)
          that is interpreted by JVM into machine code and that is run on actual platform.
    *FLOW: Java Application Code --> Java Compiler --> ByteCode --> JVM --> Machine Code --> Run in Hardware OS 

Version and Editions:
    - Java EE
        - Java SE
            -Java ME

Object Oriented Programming

 - Class : Blueprint
 - Objects : Real world entities

 Features:
  - Abstraction
  - Inheritance
  - Poly-Morphism
  

  Primitive Data Types
    - byte 
    - short
    - int 
    - long
    - float
    - double
    - char
    - boolean

Objects v/s Primitive
 - Objects have state and behavior
 - Primitives have only single value

Instantiating an Object
    String s = new String();
    Circle c = new Circle();

    Circle = Reference Types
    c = reference variable
    new = keyword
    Circle() = Object type

Memory Management - Stack and Heap
    - In the memory managed by JVM behind the scenes,
         object references and objects assigned to them are managed by Stacks and Heaps

Objects contain data, data is stored in instance variables

Instantiating of an Object:
    - Using new keyword
    - When you Instance an Object with new Keyword you are actually re-creating a special method called Constructor
    
    Class X Instantiates Point
    Point point = new Point(2, 5);

    Class Point 
    public Class Point{
        //Constructor
         public Point(int p1, int p2){
             x = p1;
             y = p2;
         }
     }

Constructor gives you flexibility to pass any no. of parameters in int

Customer c = new Customer(a, b, c)
Customer c = new Customer();
Customer c = new Customer(a, b);

-> Creating Object Types
    - An object type is called as Class
    - A class is a template for object creation
    - An object is really an instance of class
    - Many object instances can be generated from the class

    Note: Each file may only contain only one public top level class
        * Other top level classes may be included in one file but they may not list an access modifier.(Encapsulation ref*)
        //Good Exam Topic
        public class HelloWorld{

        }
        class AHelperClass{

        }

        (Refer Car Class Example)

        - Instance Variables are created before methods in Class.
        
        
	"Void"
	A method that declares a return type of void cannot return any value.  So, for example, the following is illegal and would not compile:
	public void doSomething() {
	    return "Hello!";
	}
	
	It is, however, legal (though uncommon) to just use the return statement.
	public void doSomething() {
	    return;
	}
	
	
As mentioned, it's pretty uncommon (and useless) 
to see a return like that on it's own... though it can be used to end a method inside of a control structure.

-> Building Constructors

	    - Constructors are special methods
	    - Constructor methods have the same name as the class itself
	    - Constructor look just like other methods but they have no return types not even void
	    - Constructors are invoked only by using the new keyword not the dot notation like methods
	    - You should use Constructors to initialize data
	
	public class Car{
	    String color;
	    String type;
	
	    Car(String c, String t){
	        color = c;
	        type = t;
	    }
	}
	
	Car car = new Car ("blue", "Lambhorghini")

Q:  What's the difference between a "default" and a "no-arg" constructor?

	A:  A "no-arg" constructor is one that lists no parameters (it takes no arguments).  A "default" 
	    constructor is a "no-arg" constructor that is created by the compiler, 
	    in the event that you don't explicitly create one yourself.

-> Initialization Blocks
{
    //innitialization bock
}

//Example
//Initialization Block Example
	public Class Ib{
	
	    String a = "A for apple";
	
	    {
	        a = "A for Airplane";
	    }
	
	    Ib (){
	        a = "A for Air"; 
	        a
	    }
	}
	
	//a is assigned "A for Apple" first then "A for Airplane" and then "A for Air"
	
	public Class Ib{
	
	    {
	        a = "A for Airplane";
	    }
	
	    String a = "A for apple";
	    String b = "B for ball";    
	
	    Ib (){
	        a = "A for Air"; 
	        
	    }
	}
	
	//a is assigned "A for Apple" first then "A for Airplane" and then "A for Air"
	
	public Class Ib{
	
	    Ib (){
	        a = "A for Air";
	    }  
	    
	    String a = "A for apple";
	    String b = "B for ball";
	    
	    {
	        a = "A for Airplane";
	    }
	}
	
	//a is assigned "A for Apple" first then "A for Airplane" and then "A for Air"